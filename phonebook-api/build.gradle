plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.4"
}

group = 'com.telran'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.5.4'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.5.4'
    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    runtimeOnly 'org.postgresql:postgresql:42.2.23.jre7'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.5.4'
}

test {
    useJUnitPlatform()
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// api build
ext.versionPropsFilename = "src/main/resources/version.properties"

ext.incrementAndGetBuildVersion = {
    def versionPropsFile = file(versionPropsFilename)
    if (versionPropsFile.canRead()) {
        def versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def versionBuild = versionProps['version.build'].toInteger() + 1
        versionProps['version.build'] = versionBuild.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
        return versionBuild
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

task bootJarDev {
    dependsOn('bootJar')
    group('build')
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(bootJarDev)) {
        def build = ext.incrementAndGetBuildVersion()
        version = "${version}.${build}-DEV"
    }
}


// ui tasks

ext {
    uiBuildDirectory = "src/main/resources/static"
}

task buildUi {
    dependsOn('copyUiBuild')
    group('build')
}

task copyUiBuild(type: Copy) {
    dependsOn(':phonebook-ui:npm_run_build')
    dependsOn('clearUiBuild')
    from("${project(":phonebook-ui").projectDir}/dist/phonebook-ui")
    into(project.ext.uiBuildDirectory)
}

task clearUiBuild(type: Delete) {
    def files = file(project.ext.uiBuildDirectory).listFiles()
    if (files)
        delete(files)
}

